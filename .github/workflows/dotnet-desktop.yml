# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest

    env:
      Test_Project_Path: ""                        # Optional: set if you have a specific test project
      Wap_Project_Directory: ""                    # Optional: set if your WAP project is in a subdir
      Wap_Project_Path: ""                         # Optional: set if you know your .wapproj path

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Find solution file
      id: find_sln
      shell: pwsh
      run: |
        $sln = Get-ChildItem -Path . -Filter *.sln -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
        if (-not $sln) {
          Write-Error "No solution file (*.sln) found in the repository. Please add one or set solution/project paths in the workflow."
          exit 1
        }
        Write-Host "Found solution: $($sln.FullName)"
        Write-Output "slnPath=$($sln.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Execute unit tests
      shell: pwsh
      run: |
        if ($env:Test_Project_Path -and $env:Test_Project_Path -ne "") {
          Write-Host "Running tests in specified project: $env:Test_Project_Path"
          dotnet test $env:Test_Project_Path -c ${{ matrix.configuration }} --no-restore
        } else {
          Write-Host "Running tests for solution: ${{ steps.find_sln.outputs.slnPath }}"
          dotnet test "$${{ steps.find_sln.outputs.slnPath }}" -c ${{ matrix.configuration }} --no-restore
        }

    - name: Restore the application
      shell: pwsh
      env:
        Configuration: ${{ matrix.configuration }}
      run: |
        msbuild "$${{ steps.find_sln.outputs.slnPath }}" /t:Restore /p:Configuration=$env:Configuration

    - name: Decode the pfx
      if: secrets.Base64_Encoded_Pfx != ''
      shell: pwsh
      run: |
        if (-not $env:Wap_Project_Directory -or $env:Wap_Project_Directory -eq '') {
          $targetDir = (Get-Location).Path
        } else {
          $targetDir = $env:Wap_Project_Directory
        }
        $pfx_cert_byte = [System.Convert]::FromBase64String("$${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $targetDir -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        Write-Host "Wrote signing certificate to: $certificatePath"

    - name: Create the app package
      shell: pwsh
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
      run: |
        if ($env:Wap_Project_Path -and $env:Wap_Project_Path -ne '') {
          $projToBuild = $env:Wap_Project_Path
        } else {
          $wapproj = Get-ChildItem -Path . -Filter *.wapproj -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $wapproj) {
            Write-Host "No Windows Application Packaging project (.wapproj) found. Skipping app package creation."
            exit 0
          }
          $projToBuild = $wapproj.FullName
        }

        Write-Host "Packaging project: $projToBuild"
        msbuild $projToBuild /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms

    - name: Remove the pfx
      if: secrets.Base64_Encoded_Pfx != ''
      shell: pwsh
      run: |
        if ($env:Wap_Project_Directory -and $env:Wap_Project_Directory -ne '') {
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        } else {
          $certificatePath = Join-Path -Path (Get-Location).Path -ChildPath GitHubActionsWorkflow.pfx
        }
        if (Test-Path $certificatePath) {
          Remove-Item -Path $certificatePath -Force
          Write-Host "Removed: $certificatePath"
        } else {
          Write-Host "No pfx found to remove at: $certificatePath"
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
